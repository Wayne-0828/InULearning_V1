services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: inulearning_postgres
    environment:
      POSTGRES_DB: inulearning
      POSTGRES_USER: aipe-tester
      POSTGRES_PASSWORD: aipe-tester
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./2_implementation/database/migrations/postgresql/001_init_learning_system.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./2_implementation/database/migrations/postgresql/002_ai_analysis_results.sql:/docker-entrypoint-initdb.d/02-ai-analysis-results.sql
      - ./2_implementation/database/migrations/postgresql/003_ai_results_jsonb.sql:/docker-entrypoint-initdb.d/03-ai-results-jsonb.sql
      - ./2_implementation/database/seeds/postgresql/knowledge_points_seed.sql:/docker-entrypoint-initdb.d/04-knowledge-points-seed.sql
    ports:
      - "5432:5432"
    networks:
      - inulearning_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U aipe-tester -d inulearning" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB 資料庫
  mongodb:
    image: mongo:7.0
    container_name: inulearning_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: aipe-tester
      MONGO_INITDB_ROOT_PASSWORD: aipe-tester
      MONGO_INITDB_DATABASE: inulearning
    volumes:
      - mongodb_data:/data/db
      - ./2_implementation/database/migrations/mongodb/init-mongodb.js:/docker-entrypoint-initdb.d/01_init-mongodb.js
      - ./2_implementation/database/migrations/mongodb/init-chapters.js:/docker-entrypoint-initdb.d/02_init-chapters.js
      - ./rawdata:/docker-entrypoint-initdb.d/rawdata
    ports:
      - "27017:27017"
    networks:
      - inulearning_network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 快取
  redis:
    image: redis:7.2-alpine
    container_name: inulearning_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inulearning_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO 物件儲存
  minio:
    image: minio/minio:latest
    container_name: inulearning_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: aipe-tester
      MINIO_ROOT_PASSWORD: aipe-tester
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - inulearning_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 認證服務
  auth-service:
    build:
      context: ./2_implementation/backend/auth-service
      dockerfile: Dockerfile
    container_name: inulearning_auth_service
    environment:
      - DATABASE_URL=postgresql://aipe-tester:aipe-tester@postgres:5432/inulearning
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://localhost:8081","http://localhost:8082"]
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs

  # 題庫服務
  question-bank-service:
    build:
      context: ./2_implementation/backend/question-bank-service
      dockerfile: Dockerfile
    container_name: inulearning_question_bank_service
    environment:
      - MONGODB_URL=mongodb://aipe-tester:aipe-tester@mongodb:27017/inulearning?authSource=admin
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=aipe-tester
      - MINIO_SECRET_KEY=aipe-tester
      - MINIO_BUCKET_NAME=question-bank
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://localhost:8081","http://localhost:8082"]
    ports:
      - "8002:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs
      - ./rawdata:/app/rawdata
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 題庫資料載入（一次性執行）
  question-bank-loader:
    build:
      context: ./2_implementation/backend/question-bank-service
      dockerfile: Dockerfile
    container_name: inulearning_question_bank_loader
    command: [ "python", "load_rawdata.py" ]
    environment:
      - MONGODB_URL=mongodb://aipe-tester:aipe-tester@mongodb:27017/inulearning?authSource=admin
      - MONGODB_DATABASE=inulearning
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=aipe-tester
      - MINIO_SECRET_KEY=aipe-tester
      - MINIO_BUCKET_NAME=question-bank
      - MINIO_SECURE=false
      - QB_SEEDS_PATH=/app/rawdata/全題庫
      - QB_CLEAR=false
      - QB_SKIP_IF_EXISTS=true
      - QB_MAX_IMAGE_TASKS=12
      - QB_MAX_QUESTION_TASKS=48
      - QB_QUESTION_BATCH_SIZE=500
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - inulearning_network
    volumes:
      - ./2_implementation/database/seeds:/app/rawdata:ro
    restart: "no"

  # 學習服務
  learning-service:
    build:
      context: ./2_implementation/backend/learning-service
      dockerfile: Dockerfile
    container_name: inulearning_learning_service
    environment:
      DATABASE_URL: postgresql+asyncpg://aipe-tester:aipe-tester@postgres:5432/inulearning
      MONGODB_URL: mongodb://aipe-tester:aipe-tester@mongodb:27017/inulearning?authSource=admin
      REDIS_URL: redis://redis:6379/0
      AUTH_SERVICE_URL: http://auth-service:8000
      # 舊變數保留兼容，實際使用 QUESTION_BANK_URL
      QUESTION_BANK_SERVICE_URL: http://question-bank-service:8000
      QUESTION_BANK_URL: http://question-bank-service:8000
      CORS_ORIGINS: '["http://localhost","http://localhost:3000","http://localhost:8080","http://localhost:8081","http://localhost:8082","http://localhost:8083"]'
      SECRET_KEY: dev-secret
      ALGORITHM: HS256
      JWT_SECRET_KEY: dev-secret
      JWT_ALGORITHM: HS256
      DEBUG: "true"
      ENVIRONMENT: development
    ports:
      - "8003:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      question-bank-service:
        condition: service_started
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs

  # AI 分析服務
  ai-analysis-service:
    build:
      context: ./2_implementation/backend/ai-analysis-service
      dockerfile: Dockerfile
    container_name: inulearning_ai_analysis_service
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aipe-tester
      - POSTGRES_PASSWORD=aipe-tester
      - POSTGRES_DB=inulearning
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - AI_MAX_CONCURRENCY=${AI_MAX_CONCURRENCY:-3}
      - AI_RATE_LIMIT_RPS=${AI_RATE_LIMIT_RPS:-2}
      - AI_DEDUP_LOCK_TTL=${AI_DEDUP_LOCK_TTL:-300}
      - AI_RETRY_MAX_ATTEMPTS=${AI_RETRY_MAX_ATTEMPTS:-2}
      - AI_RETRY_BACKOFF_SECONDS=${AI_RETRY_BACKOFF_SECONDS:-2}
      - AI_PREWARM_DEFAULT_NEXT_N=${AI_PREWARM_DEFAULT_NEXT_N:-5}
      - AI_USE_RQ=${AI_USE_RQ:-1}
      - AI_RQ_QUEUE_NAME=${AI_RQ_QUEUE_NAME:-ai-analysis}
      - AI_JOB_TIMEOUT_SECONDS=${AI_JOB_TIMEOUT_SECONDS:-900}
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8004/api/v1/ai/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI 分析 Worker（RQ）
  ai-analysis-worker:
    build:
      context: ./2_implementation/backend/ai-analysis-service
      dockerfile: Dockerfile
    container_name: inulearning_ai_analysis_worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - AI_RQ_QUEUE_NAME=${AI_RQ_QUEUE_NAME:-ai-analysis}
      - AI_USE_RQ=1
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aipe-tester
      - POSTGRES_PASSWORD=aipe-tester
      - POSTGRES_DB=inulearning
      - AI_RATE_LIMIT_RPS=${AI_RATE_LIMIT_RPS:-2}
      - AI_RETRY_MAX_ATTEMPTS=${AI_RETRY_MAX_ATTEMPTS:-2}
      - AI_RETRY_BACKOFF_SECONDS=${AI_RETRY_BACKOFF_SECONDS:-2}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - inulearning_network
    working_dir: /app
    command: ["python", "-u", "src/services/rq_worker.py"]
    restart: unless-stopped

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: inulearning_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./2_implementation/frontend/shared:/usr/share/nginx/html/shared
      - ./2_implementation/frontend/shared/auth/login.html:/usr/share/nginx/html/login.html
      - ./2_implementation/frontend/shared/auth/register.html:/usr/share/nginx/html/register.html
      - ./2_implementation/frontend/shared/homepage/index.html:/usr/share/nginx/html/index.html
      - ./2_implementation/frontend/shared/js:/usr/share/nginx/html/js
      - ./2_implementation/frontend/shared/css:/usr/share/nginx/html/css
    depends_on:
      - auth-service
      - question-bank-service
      - learning-service
      - ai-analysis-service
      - parent-dashboard-service
      - report-service
    networks:
      - inulearning_network

  # 學生端前端
  student-frontend:
    build:
      context: ./2_implementation/frontend/student-app
      dockerfile: Dockerfile
    container_name: inulearning_student_frontend
    ports:
      - "8080:80"
    environment:
      - API_BASE_URL=http://localhost/api
    networks:
      - inulearning_network
    volumes:
      - ./files:/usr/share/nginx/html/files
      - ./2_implementation/frontend/shared:/usr/share/nginx/html/shared
      - ./2_implementation/frontend/shared/auth/login.html:/usr/share/nginx/html/login.html

  # 管理員端前端
  admin-frontend:
    build:
      context: ./2_implementation/frontend/admin-app
      dockerfile: Dockerfile
    container_name: inulearning_admin_frontend
    ports:
      - "8081:80"
    environment:
      - API_BASE_URL=http://localhost/api
    networks:
      - inulearning_network
    volumes:
      - ./files:/var/www/html/files
      - ./2_implementation/frontend/shared:/usr/share/nginx/html/shared

  # 家長端前端
  parent-frontend:
    build:
      context: ./2_implementation/frontend/parent-app
      dockerfile: Dockerfile
    container_name: inulearning_parent_frontend
    ports:
      - "8082:80"
    environment:
      - API_BASE_URL=http://localhost/api
    networks:
      - inulearning_network
    volumes:
      - ./files:/var/www/html/files
      - ./2_implementation/frontend/shared:/usr/share/nginx/html/shared

  # 教師端前端
  teacher-frontend:
    build:
      context: ./2_implementation/frontend/teacher-app
      dockerfile: Dockerfile
    container_name: inulearning_teacher_frontend
    ports:
      - "8083:80"
    environment:
      - API_BASE_URL=http://localhost/api
    networks:
      - inulearning_network
    volumes:
      - ./files:/var/www/html/files
      - ./2_implementation/frontend/shared:/usr/share/nginx/html/shared
      - ./2_implementation/frontend/teacher-app:/usr/share/nginx/html

  # 家長儀表板服務
  parent-dashboard-service:
    build:
      context: ./2_implementation/backend/parent-dashboard-service
      dockerfile: Dockerfile
    container_name: inulearning_parent_dashboard_service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - LEARNING_SERVICE_URL=http://learning-service:8000
      - AI_ANALYSIS_SERVICE_URL=http://ai-analysis-service:8004
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs

  # 報告服務
  report-service:
    build:
      context: ./2_implementation/backend/report-service
      dockerfile: Dockerfile
    container_name: inulearning_report_service
    environment:
      - DATABASE_URL=postgresql://aipe-tester:aipe-tester@postgres:5432/inulearning
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs

# 教師管理服務
  teacher-management-service:
    build:
      context: ./2_implementation/backend/teacher-management-service
      dockerfile: Dockerfile
    container_name: inulearning_teacher_management_service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - LEARNING_SERVICE_URL=http://learning-service:8000
      - AI_ANALYSIS_SERVICE_URL=http://ai-analysis-service:8004
      - QUESTION_BANK_SERVICE_URL=http://question-bank-service:8000
      - CORS_ORIGINS=["http://localhost","http://localhost:3000","http://localhost:8080","http://localhost:8081","http://localhost:8082","http://localhost:8083"]
    ports:
      - "8007:8006"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
      learning-service:
        condition: service_started
      question-bank-service:
        condition: service_started
    networks:
      - inulearning_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8006/health" ]
      interval: 30s
      timeout: 10s
      retries: 3  
          
  # 備註：以下服務暫時註釋，後續開發
  # ai-analysis-service:  # 備註 - Milvus/RAG 後續開發
  # notification-service: # 備註 - 後續開發
  

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  minio_data:


networks:
  inulearning_network:
    driver: bridge
